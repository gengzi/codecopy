# 参考 https://github.com/hepyu/k8s-app-config/blob/master/yaml/min-cluster-allinone/nginx/nginx.conf.desc
#user  nobody;
# 定义了nginx对外提供web服务时的worker进程数 将其设置为可用的CPU内核数将是一个好的开始（设置为“auto”将尝试自动检测它）。
worker_processes  auto;

#error_log  lologsgs/error.log;
#error_log  /error.log  notice;
#生产环境我们只打error日志；access日志一般是关闭的，否则中断太多，严重影响nginx性能。
error_log  logs/error.log  notice;

#pid        logs/nginx.pid;


events {
    # 设置可由一个worker进程同时打开的最大连接数。 #使用epoll的I/O 模型，必开项，极其有利于性能。
    worker_connections  65535;
    #  multi_accept 告诉nginx收到一个新连接通知后接受尽可能多的连接。
    multi_accept on;
    # 设置用于复用客户端线程的轮询方法。如果你使用Linux 2.6+，你应该使用epoll。如果你使用*BSD，你应该使用kqueue。
    use epoll;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

     log_format access
            '{"version": "2", '
            '"time": "$time_iso8601", '
            '"remote_addr": "$remote_addr", '
            '"status": "$status", '
            '"bytes_sent": "$bytes_sent", '
            '"host": "$host", '
            '"request_method": "$request_method", '
            '"request_uri": "$request_uri", '
            '"request_time": "$request_time", '
            '"response_time": "$upstream_response_time",'
            '"http_referer": "$http_referer", '
            '"body_bytes_sent": "$body_bytes_sent", '
            '"http_user_agent": "$http_user_agent", '
            '"http_x_forwarded_for": "$http_x_forwarded_for", '
            '"cookie": "$http_cookie"}';


     access_log  logs/access.log  access;

	#这个参数指定了是否记录客户端的请求出现404错误的日志。
    log_not_found	off;
    #隐藏版本号
    #off：表示赢藏nginx版本号。
    server_tokens	off;
    #开启0拷贝
    sendfile        on;
    # tcp_nopush 告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送。
    tcp_nopush     on;
    tcp_nodelay 	on;
    client_body_timeout	10;


    #keepalive_timeout  0;
    keepalive_timeout  60;
    #可以服务的请求的最大数量
    keepalive_requests	1000;
    # 请求头缓存大小
    client_header_buffer_size	    32k;
    large_client_header_buffers	    4 64k;

    client_body_in_single_buffer    on;

    proxy_ignore_client_abort	    on;

    underscores_in_headers	    on;
    ignore_invalid_headers	    off;
    client_header_timeout	9;
    send_timeout		60;
    #我们使用web上传文件时用nginx做代理必须配置此项，否则文件太大会发生中断。
    client_max_body_size	50m;
    #gzip  on;

        gzip		on;
        gzip_http_version	1.0;
        gzip_comp_level	6;
        gzip_min_length	1k;
        gzip_proxied	any;
        gzip_vary		on;
        gzip_disable	msie6;
        gzip_buffers	4 64k;
        gzip_types		text/xml text/plain text/css application/javascript application/x-javascript application/xml application/json application/rss+xml;


        server_names_hash_max_size    1024;
        server_names_hash_bucket_size 128;

        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_redirect          off;
        proxy_buffers           64 8k;
        proxy_connect_timeout   60;

       proxy_temp_path	/mnt/e/elasticsearch/proxy_temp;
       proxy_cache_path	/mnt/e/elasticsearch/proxy_cache levels=1:2 keys_zone=cache_one:512m inactive=1d max_size=2g;

    upstream nodes {
    server 127.0.0.1:8089;
    }

    # HTTPS server
    #
    server {
        listen       443 ssl;
        server_name  localhost;

        ssl_certificate      server-cert.crt;
        ssl_certificate_key  server-key.key;
        ssl_client_certificate ca.cer;  #根级证书公钥，用于验证各个二级client
        ssl_verify_client on;  #开启客户端证书验证

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;


         location / {
        		 proxy_redirect off;
                 # proxy_set_header Host $host;
          		 proxy_set_header Host $host:8088; #添加:$server_port
                 proxy_set_header X-Real-IP $remote_addr;
                 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                 proxy_pass  http://nodes;
                }

               location /swagger-ui.html{
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_set_header X-Forwarded-Host $host;
                    proxy_set_header X-Forwarded-Port $server_port;
                    proxy_pass http://nodes/swagger-ui.html;
                }

               location /swagger-resources {
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_set_header X-Forwarded-Host $host;
                    proxy_set_header X-Forwarded-Port $server_port;
                    proxy_pass http://nodes/swagger-resources;
                }

               location /v2/api-docs {
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_set_header X-Forwarded-Host $host;
                    proxy_set_header X-Forwarded-Port $server_port;
                    proxy_pass http://nodes/v2/api-docs;
                }

                location /webjars{
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_set_header X-Forwarded-Host $host;
                    proxy_set_header X-Forwarded-Port $server_port;
                    proxy_pass http://nodes/webjars/;
                    client_max_body_size 50m;
                    client_body_buffer_size 256k;
                    proxy_connect_timeout 1;
                    proxy_send_timeout 30;
                    proxy_read_timeout 60;
                    proxy_buffer_size 256k;
                    proxy_buffers 4 256k;
                    proxy_busy_buffers_size 256k;
                    proxy_temp_file_write_size 256k;
                    proxy_next_upstream error timeout invalid_header http_500 http_503 http_404;
                    proxy_max_temp_file_size 128m;
                    add_header Cache-Control no-store;
                }

        	    location /webjars/springfox-swagger-ui{
        	        # 请求报文大小
                    client_max_body_size 50m;
                    # 设定了request body的缓冲大小
                    client_body_buffer_size 256k;
                    add_header Cache-Control no-store;
                    #  与后端建立连接的超时时间,单位秒，默认值60秒。
                    proxy_connect_timeout 1;
                    proxy_send_timeout 30;
                    proxy_read_timeout 60;
                    proxy_buffer_size 256k;
                    proxy_buffers 4 256k;
                    proxy_busy_buffers_size 256k;
                    proxy_temp_file_write_size 256k;
                    proxy_next_upstream error timeout invalid_header http_500 http_503 http_404;
                    proxy_max_temp_file_size 128m;
                    # 即允许重新定义或添加字段传递给代理服务器的请求头。
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_set_header X-Forwarded-Host $host;
                    proxy_set_header X-Forwarded-Port $server_port;
                    proxy_pass http://nodes/webjars/springfox-swagger-ui;
                }

                #error_page  404              /404.html;

                # redirect server error pages to the static page /50x.html
                #
                error_page   500 502 503 504  /50x.html;
                location = /50x.html {
                    root   html;
                }
    }

}

