server:
  port: 8089
spring:
  application:
    name: codecopy
  profiles:
    active: dev
#  datasource:
#    # 注意mysql 时区 字符集编码
#    url: jdbc:mysql://127.0.0.1:3306/sqltest?autoReconnect=true&serverTimezone=Asia/Shanghai
#    username: root
#    password: 111
#    type: com.alibaba.druid.pool.DruidDataSource
    # redis 配置
  redis:
    host: localhost
    port: 6379
    jedis.pool.max-wait: -1ms
    timeout: 2000ms
  jpa: #jpa配置
    properties:
      hibernate.dialect: org.hibernate.dialect.MySQL5Dialect
      hibernate.current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
    hibernate:
      ddl-auto: none
    show-sql: true
  # 通过默认配置，配置 cache 相关
  shardingsphere:
    # 显示sql
    props:
      sql:
        show: true
    datasource:
      # 配置两个数据源
      names: ds0,ds1
      # ds0 数据源
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/ds0?autoReconnect=true&serverTimezone=Asia/Shanghai
        username: root
        password: 111
      # ds1 数据源
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/ds1?autoReconnect=true&serverTimezone=Asia/Shanghai
        username: root
        password: 111

    sharding:
      # 默认的数据源名称
      default-data-source-name: ds0
      # 主键生成策略
      key-generators:
        snowflake:
          type: SNOWFLAKE
      # 绑定表
      binding-tables: oh_enterprise_info
      # 广播表 配置为广播表，会在执行插入 更新时，都每个数据库都执行
      broadcast-tables: shorturl,area_info,dic_data,dic_list,sys_permission
      # 默认的数据库策略
      default-database-strategy:   # 分库策略
        inline:
          # 数据分片的列
          sharding-column: data_version
          # 分片算法  算法根据 userid 除以2 来区分
          algorithm-expression: ds$->{data_version % 2}
      # 表配置
      tables:   # 分表策略
        # 业务表
        oh_enterprise_info:
          # 主键生成策略
          key-generator:
            # 列
            column: ENTERPRISE_INFO_ID
            # 生成算法
            type: SNOWFLAKE
            props:
              worker:
                id: 123
          # 实际数据节点
          actual-data-nodes: ds$->{0..1}.oh_enterprise_info$->{0..1}
          # 表策略
          table-strategy:
            inline:
              # 分片列
              sharding-column: ENTERPRISE_INFO_ID
              # 分片算法
              algorithm-expression: oh_enterprise_info$->{ENTERPRISE_INFO_ID % 2}

      #        # 用户表

      #        sys_users:
#          key-generate-strategy:
#            column: ID
#            key-generator-name: snowflake
#          actual-data-nodes: ds$->{0..1}.sys_users$->{0..1}
#          table-strategy:
#            inline:
#              sharding-column: ID
#              algorithm-expression: sys_users$->{ID % 2}



#  cache:
#    type: caffeine
#    caffeine:
#      # 配置缓存,初始缓存容量为10,最大容量为200,过期时间(这里配置写入后过期时间为3秒)
#      spec: initialCapacity=10,maximumSize=200,expireAfterWrite=3s






























# 短链接
shorturl:
  # 短链接前缀
  pre: http://localhost:8089/u/

# token 认证相关
token:
  # aes 密钥
  aeskey: f24fea293ac8bd5a6439f3ca3df746ae
  # rsa 公钥
  publickey: MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALbcdLKOtTKOjalffv/LLLOqfyh8Ep4XHjvOivMU3Nb1N0puG4+NTrXBS8GDczgsZ+7J6D7FTcH8JInMKpz85LMCAwEAAQ==
  # rsa 密钥
  secretkey: MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEAttx0so61Mo6NqV9+/8sss6p/KHwSnhceO86K8xTc1vU3Sm4bj41OtcFLwYNzOCxn7snoPsVNwfwkicwqnPzkswIDAQABAkBGw9Xda+Cvaf9kdnJdZzErbmW7Mxi5WVT37BxVqdM01BTjudKSADlLn53fEeWl7pmfMkMuXZ7uPNdqmLWVLMNxAiEA6LXvDTKtEZNyTvjXs4nDJweiIT9kZtZmYD3hVcQueJUCIQDJKV+PcdKehVw8U+hdeE4/NZDFCHRzaGM4Zs5YRRbuJwIgSG0fSn9EKB04zWVbVNCCgWo5xplBOVRvJnL758KYKAUCIDdpmzZDb3ZVXCwOHRMqYbuNwNxV0OY9mh9eSncMSR2/AiEApSModT03Kr+nHxhgzAyOvzLcKE0IPMJ+ny3mjdyBjWc=
  url:
    # 远程校验token 的服务地址
    validToken:  http://localhost:8089/api/v1/validToken


redis:
  subsection:
    # 分段发号器的key
    subkey: onenum
    # 发号器初始化 号码
    initValue: 101
    # 发号器 增加步长
    step: 20

# springboot actuator 监控
management:
  endpoints:
    web:
      exposure:
        # 开放所有的端点
        include: "*"
